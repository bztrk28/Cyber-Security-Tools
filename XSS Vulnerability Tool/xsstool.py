import requests
import os

class XSSScanner:
    def __init__(self, url):
        self.url = url
        self.payloads = self.load_payloads()
        self.vulnerabilities = []

    def load_payloads(self):
        # XSS payloadlarını payloads.txt dosyasından çekecek
        if not os.path.exists('payloads.txt'):
            raise FileNotFoundError("Payloads file not found.")
        
        with open('payloads.txt', 'r') as file:
            return [line.strip() for line in file.readlines() if line.strip()]

    def scan(self):
        # XSS payloadlarını deniyor
        print(f"Scanning {self.url} for XSS vulnerabilities...\n")
        for payload in self.payloads:
            test_url = f"{self.url}?param={payload}"
            try:
                response = requests.get(test_url, timeout=5)
                if self.is_vulnerable(response.text, payload):
                    print(f"[!] Vulnerability found with payload: {payload}")
                    self.vulnerabilities.append(payload)
                else:
                    print(f"[ ] No vulnerability with payload: {payload}")
            except requests.exceptions.RequestException as e:
                print(f"[Error] {e}")

    def is_vulnerable(self, response_text, payload):
        # Dönüş kontrol güvenlik açığı varsa
        return payload in response_text

    def generate_report(self):
        """Generate a report of found vulnerabilities."""
        with open('report.txt', 'w') as report_file:
            report_file.write(f"XSS Vulnerability Report for {self.url}\n")
            report_file.write("=" * 50 + "\n")
            if self.vulnerabilities:
                for payload in self.vulnerabilities:
                    report_file.write(f"Vulnerability found with payload: {payload}\n")
            else:
                report_file.write("No vulnerabilities found.\n")
        print("\nReport generated: report.txt")

if __name__ == "__main__":
    try:
        target_url = input("Enter the URL you want to scan (Example: http://example.com/page.php): ")
        scanner = XSSScanner(target_url)
        scanner.scan()
        scanner.generate_report()
    except Exception as e:
        print(f"[Error] {e}")
