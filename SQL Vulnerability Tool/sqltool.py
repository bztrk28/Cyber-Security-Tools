import requests
import os

class SQLInjectionScanner:
    def __init__(self, url):
        self.url = url
        self.payloads = self.load_payloads()
        self.vulnerabilities = []

    def load_payloads(self):
        """Load SQL injection payloads from a file."""
        if not os.path.exists('payloads.txt'):
            raise FileNotFoundError("Payloads file not found.")
        
        with open('payloads.txt', 'r') as file:
            return [line.strip() for line in file.readlines() if line.strip()]

    def scan(self, method='GET'):
        """Scan the target URL for SQL injection vulnerabilities using specified HTTP method."""
        print(f"Scanning {self.url} for SQL injection vulnerabilities using {method} method...\n")
        for payload in self.payloads:
            full_url = self.url + payload
            try:
                if method.upper() == 'POST':
                    response = requests.post(full_url, data={}, timeout=5)  # Empty data for demonstration
                elif method.upper() == 'PUT':
                    response = requests.put(full_url, data={}, timeout=5)  # Empty data for demonstration
                elif method.upper() == 'DELETE':
                    response = requests.delete(full_url, timeout=5)
                else:
                    response = requests.get(full_url, timeout=5)

                if self.is_vulnerable(response):
                    print(f"[!] Vulnerability found with payload: {payload} (Method: {method})")
                    self.vulnerabilities.append((payload, method))
                else:
                    print(f"[ ] No vulnerability with payload: {payload} (Method: {method})")
            except requests.exceptions.RequestException as e:
                print(f"[Error] {e}")

    def is_vulnerable(self, response):
        """Check if the response indicates a vulnerability based on response content and status code."""
        content_check = "error" in response.text.lower() or "sql" in response.text.lower()
        status_check = response.status_code == 500  # SQL errors often return 500 status
        return content_check or status_check

    def generate_report(self):
        """Generate a report of found vulnerabilities."""
        with open('report.txt', 'w') as report_file:
            report_file.write(f"SQL Injection Vulnerability Report for {self.url}\n")
            report_file.write("=" * 50 + "\n")
            if self.vulnerabilities:
                for payload, method in self.vulnerabilities:
                    report_file.write(f"Vulnerability found with payload: {payload} (Method: {method})\n")
            else:
                report_file.write("No vulnerabilities found.\n")
        print("\nReport generated: report.txt")

if __name__ == "__main__":
    try:
        target_url = input("Taramak istediğiniz URL'yi girin (örneğin: http://example.com/page.php?id=): ")
        method = input("Hangi HTTP yöntemini kullanmak istersiniz? (GET/POST/PUT/DELETE): ")
        scanner = SQLInjectionScanner(target_url)
        scanner.scan(method)
        scanner.generate_report()
    except Exception as e:
        print(f"[Error] {e}")
